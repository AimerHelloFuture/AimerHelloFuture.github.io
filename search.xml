<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[VS中scanf函数说明]]></title>
      <url>http://yoursite.com/2015/08/02/VS%E4%B8%ADscanf%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>众所周知，由于安全原因，vs2012版本及其以上会出现scanf函数报错的情形，编译时便会提示如下错误<a id="more"></a>：</p>
<blockquote>
<p>error C4996: ‘scanf’: This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.</p>
</blockquote>
<p>错误解释：</p>
<p>微软该种类型报错主要因为那些C库的函数，很多函数内部是不进行参数检测的（包括越界类的），微软担心使用这些会造成内存异常，所以就改写了同样功能的函数，改写了的函数进行了参数的检测，使用这些新的函数会更安全和便捷。关于这些改写的函数你不用专门去记忆，因为编译器对于每个函数在给出警告时，都会告诉你相应的安全函数，查看警告信息就可以获知，在使用时也再查看一下MSDN详细了解。</p>
<h3 id="一般来说，直接解决该问题方法有三种："><a href="#一般来说，直接解决该问题方法有三种：" class="headerlink" title="一般来说，直接解决该问题方法有三种："></a>一般来说，直接解决该问题方法有三种：</h3><p>方法一：将原来的旧函数替换成新的 Security CRT functions，即替换成为新的函数scanf_s，但是scanf_s函数比scanf函数多了一个参数，即读取个数参数。例如scanf从输入流中读取一个字符类型字节,scanf(“%c”,&amp;ch),则若使用scanf_s需改为scanf_s(“%c”,&amp;ch,1);</p>
<p>方法二：以下方法的原理为屏蔽这个错误：</p>
<ol>
<li>在预编译头文件stdafx.h里（注意：一定要在没有include任何头文件之前）定义下面的宏：</li>
</ol>
<blockquote>
<pre><code>#define _CRT_SECURE_NO_DEPRECATE
</code></pre></blockquote>
<ol>
<li><p>或声明 #param warning(disable:4996)</p>
</li>
<li><p>更改预处理定义：</p>
</li>
</ol>
<blockquote>
<p>项目-&gt;属性-&gt;配置属性-&gt;C/C++ -&gt; 预处理器 -&gt; 预处理器定义，增加：</p>
</blockquote>
<pre><code>_CRT_SECURE_NO_DEPRECATE
</code></pre><blockquote>
<p>第三种注意更改预处理定义时若在最后面加上该句话，需在这句话前面即未加之前最后面加上一个分号（在英文输入法模式下）。</p>
</blockquote>
<p>方法三：方法二没有使用更加安全的 CRT 函数，显然不是一个值得推荐的好方法，但我们又不想一个一个地改函数名，这里还有一个更简便的方法：</p>
<blockquote>
<p>在预编译头文件 stdafx.h 里（同样要在没有include任何头文件之前）定义下面的宏：</p>
</blockquote>
<pre><code>#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1
</code></pre><blockquote>
<p>在链接的时候便会自动将旧函数替换成 Security CRT functions 。</p>
<p>注意：这个方法虽然使用了新的函数，但是不能消除警告，你还得同时使用方法二(-_-)。即实际应在预编译头文件 stdafx.h 里加入下面两句：</p>
</blockquote>
<pre><code>#define _CRT_SECURE_NO_DEPRECATE

#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1
</code></pre><p>虽然解决了该报错问题，但是很多童鞋会发现运行时，scanf函数虽然并未报错，即该程序正确执行，但是在输入时，会发现scanf函数跳过输入字符的原因，即你没有办法输入的问题，这是为什么呢？</p>
<p>因为scanf只是读入一个字符,而你在输入时实际上输入的是:字符+回车(Enter),Enter产生的”\n”也在输入缓冲区中,下次调用 scanf时就会直接读到 它而不是等待你再次输入!所以我们不提倡使用 scanf(“%c”, …),特别是不提倡把它用在循环中。这也是微软改写该类函数的原因，那么如何解决呢？</p>
<h3 id="一把来说，主要方法有四种："><a href="#一把来说，主要方法有四种：" class="headerlink" title="一把来说，主要方法有四种："></a>一把来说，主要方法有四种：</h3><p>方法一：只要再加一句scanf就行了。</p>
<p>方法二：使用函数fflush，清除流，就是在每个接收字符的scanf语句前面,加上fflush(stdin);</p>
<p>方法三：将 scanf(“%c”, &amp;ch); 修改为:     scanf(“ %c”, &amp;ch);    /<em>在%前加上一个空格</em>/</p>
<p>方法四：将 scanf(“%c”, &amp;ch); 修改为:     scanf(“%c%<em>c”, &amp;ch);   %</em>c是跳过一个输入字符的意思.这个是scanf的一个语法.就是在%和格式字符之间加一个<em>号就可以跳过这个输入数字.比如当执行语句:scanf(“%c,%</em>c,%c”,&amp;a,&amp;b);时,我输入m,n,p三个字母后,a的值为m,b值为p,n被跳过了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello Future]]></title>
      <url>http://yoursite.com/2015/07/10/Hello-Future/</url>
      <content type="html"><![CDATA[<p>撒花撒花，博客搭好，当然要立一些flags啦！希望这个hexo博客能让我更加进步！<a id="more"></a></p>
<h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><h3 id="College"><a href="#College" class="headerlink" title="College"></a>College</h3><blockquote>
<p>Huazhong University of Science and Technology.</p>
</blockquote>
<h3 id="Hobby"><a href="#Hobby" class="headerlink" title="Hobby"></a>Hobby</h3><blockquote>
<p>Tennis, Music, Reading.</p>
</blockquote>
<h3 id="Dream-Flags"><a href="#Dream-Flags" class="headerlink" title="Dream? Flags!"></a>Dream? Flags!</h3><blockquote>
<p>Le vent se lève, il faut tenter de vivre.</p>
</blockquote>
<h3 id="Maxim"><a href="#Maxim" class="headerlink" title="Maxim"></a>Maxim</h3><blockquote>
<p>以最小的代价完成生命各个维度的尝试。</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
